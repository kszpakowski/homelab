apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: progressive-deploy-template
spec:
  entrypoint: main
  serviceAccountName: executor

  templates:
  # ───────────────────────────────
  # Main Entry
  # ───────────────────────────────
  - name: main
    steps:
    - - name: generate
        template: generate-clusters
    - - name: deploy-all
        template: deploy
        arguments:
          parameters:
          - name: clusters
            value: "{{steps.generate.outputs.result}}"

  # ───────────────────────────────
  # Generate Cluster List
  # ───────────────────────────────
  - name: generate-clusters
    script:
      image: python:3.8
      command: ["python"]
      source: |
        import json
        clusters = []
        for env in ["dev", "staging", "prod"]:
          for region in ["us-east-1", "us-west-2", "eu-central-1"]:
              for i in range(1, 3):
                  clusters.append({
                      "env": env,
                      "region": region,
                      "cluster": f"{env}-{region}-cluster-{i}"
                  })
        print(json.dumps(clusters))

  # ───────────────────────────────
  # Deploy All Clusters Serially
  # ───────────────────────────────
  - name: deploy
    parallelism: 1
    inputs:
      parameters:
      - name: clusters
    steps:
    - - name: deploy-one
        template: deploy-one
        arguments:
          parameters:
          - name: env
            value: "{{item.env}}"
          - name: region
            value: "{{item.region}}"
          - name: cluster
            value: "{{item.cluster}}"
        withParam: "{{inputs.parameters.clusters}}"

  # ───────────────────────────────
  # Deploy to a Single Cluster
  # ───────────────────────────────
  - name: deploy-one
    inputs:
      parameters:
      - name: env
      - name: region
      - name: cluster
    steps:
    - - name: work
        template: do-task
        arguments:
          parameters:
          - name: env
            value: "{{inputs.parameters.env}}"
          - name: region
            value: "{{inputs.parameters.region}}"
          - name: cluster
            value: "{{inputs.parameters.cluster}}"

    - - name: verify
        template: verify-multi
        arguments:
          parameters:
          - name: cluster
            value: "{{inputs.parameters.cluster}}"

    - - name: approval-on-failure
        template: approval-template
        when: "{{steps.verify.outputs.parameters.status}} == 'FAILED'"

    - - name: post-task-failure
        template: print-message
        when: "{{steps.verify.outputs.parameters.status}} == 'FAILED'"
        arguments:
          parameters:
          - name: message
            value: >-
              ❗ Deployment verification FAILED for {{inputs.parameters.cluster}}.
              Comment: {{steps.approval-on-failure.outputs.parameters.comment}}

    - - name: set-default-comment
        template: set-default-comment
        when: "{{steps.verify.outputs.parameters.status}} == 'PASSED'"

    - - name: post-task-success
        template: print-message
        when: "{{steps.verify.outputs.parameters.status}} == 'PASSED'"
        arguments:
          parameters:
          - name: message
            value: >-
              ✅ Deployment verification PASSED for {{inputs.parameters.cluster}}.

  # ───────────────────────────────
  # Perform the Deployment Work
  # ───────────────────────────────
  - name: do-task
    inputs:
      parameters:
      - name: env
      - name: region
      - name: cluster
    container:
      image: alpine
      command: [sh, -c]
      args:
      - echo "Deploying to {{inputs.parameters.cluster}} in {{inputs.parameters.region}} for {{inputs.parameters.env}}"

  # ───────────────────────────────
  # Verify Deployment with Parallel Steps
  # ───────────────────────────────
  - name: verify-multi
    inputs:
      parameters:
      - name: cluster
    outputs:
      parameters:
      - name: status
        valueFrom:
          parameter: "{{steps.aggregate-verification.outputs.parameters.status}}"
    steps:
    - - name: verify-argocd
        template: verify-argocd
        continueOn:
          failed: true
        arguments:
          parameters:
          - name: cluster
            value: "{{inputs.parameters.cluster}}"
      - name: verify-datadog
        template: verify-datadog
        continueOn:
          failed: true
        arguments:
          parameters:
          - name: cluster
            value: "{{inputs.parameters.cluster}}"
      - name: verify-coralogix
        template: verify-coralogix
        continueOn:
          failed: true
        arguments:
          parameters:
          - name: cluster
            value: "{{inputs.parameters.cluster}}"

    - - name: aggregate-verification
        template: aggregate-verify
        arguments:
          parameters:
          - name: results
            value: |
              ["{{steps.verify-argocd.outputs.parameters.status}}", "{{steps.verify-datadog.outputs.parameters.status}}", "{{steps.verify-coralogix.outputs.parameters.status}}"]

  # ───────────────────────────────
  # Verify ArgoCD App Health (80% pass, exit 1 on fail)
  # ───────────────────────────────
  - name: verify-argocd
    inputs:
      parameters:
      - name: cluster
    script:
      image: python:3.8
      command: ["python"]
      source: |
        import random
        import sys
        status = "PASSED" if random.random() < 0.8 else "FAILED"
        with open("/tmp/status", "w") as f:
            f.write(status)
        if status == "FAILED":
            sys.exit(1)
    outputs:
      parameters:
      - name: status
        valueFrom:
          path: /tmp/status

  # ───────────────────────────────
  # Verify Datadog SLOs (80% pass, exit 1 on fail)
  # ───────────────────────────────
  - name: verify-datadog
    inputs:
      parameters:
      - name: cluster
    script:
      image: python:3.8
      command: ["python"]
      source: |
        import random
        import sys
        status = "PASSED" if random.random() < 0.8 else "FAILED"
        with open("/tmp/status", "w") as f:
            f.write(status)
        if status == "FAILED":
            sys.exit(1)
    outputs:
      parameters:
      - name: status
        valueFrom:
          path: /tmp/status

  # ───────────────────────────────
  # Verify Coralogix Logs (80% pass, exit 1 on fail)
  # ───────────────────────────────
  - name: verify-coralogix
    inputs:
      parameters:
      - name: cluster
    script:
      image: python:3.8
      command: ["python"]
      source: |
        import random
        import sys
        status = "PASSED" if random.random() < 0.8 else "FAILED"
        with open("/tmp/status", "w") as f:
            f.write(status)
        if status == "FAILED":
            sys.exit(1)
    outputs:
      parameters:
      - name: status
        valueFrom:
          path: /tmp/status

  # ───────────────────────────────
  # Aggregate Verification Results
  # ───────────────────────────────
  - name: aggregate-verify
    inputs:
      parameters:
      - name: results
    script:
      image: python:3.8
      command: ["python"]
      source: |
        import json
        results = json.loads('''{{inputs.parameters.results}}''')
        if "FAILED" in results:
            final = "FAILED"
        else:
            final = "PASSED"
        with open("/tmp/final-status", "w") as f:
            f.write(final)
    outputs:
      parameters:
      - name: status
        valueFrom:
          path: /tmp/final-status

  # ───────────────────────────────
  # Approval Template (Manual Input)
  # ───────────────────────────────
  - name: approval-template
    suspend: {}
    inputs:
      parameters:
      - name: approved
        default: "NO"
        enum: ["YES", "NO"]
        description: "Approval decision (YES to continue, NO to stop)"
      - name: comment
        default: ""
        description: "Optional comment for approval"
    outputs:
      parameters:
      - name: approved
        valueFrom:
          supplied: {}
      - name: comment
        valueFrom:
          supplied: {}

  # ───────────────────────────────
  # Set Default Comment (for PASSED)
  # ───────────────────────────────
  - name: set-default-comment
    script:
      image: alpine
      command: [sh, "-c"]
      source: |
        echo "" > /tmp/comment
    outputs:
      parameters:
      - name: comment
        valueFrom:
          path: /tmp/comment

  # ───────────────────────────────
  # Print Message
  # ───────────────────────────────
  - name: print-message
    inputs:
      parameters:
      - name: message
    container:
      image: alpine:3.17
      command: ["/bin/sh", "-c"]
      args: ["echo \"{{inputs.parameters.message}}\""]